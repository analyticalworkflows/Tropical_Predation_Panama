# Plot the ccf result
plot(post_ccf_result,
main = "P. palmaeformis",
ylab = "Cross-Correlation Coefficient",
xlab = "lag (weeks)",
xlim = c(0, 80),
ylim = c(-1, 1)),
post_ccf_result <- ccf(Post_spore_data_complete$Average_Spore,
Post_recruit_data_complete$`Recruit Density`,
type = "correlation",
plot = FALSE,
lag.max = 80)
# Plot the ccf result
plot(post_ccf_result,
main = "P. palmaeformis",
ylab = "Cross-Correlation Coefficient",
xlab = "lag (weeks)",
xlim = c(0, 80),
ylim = c(-1, 1),
col = "purple")
# Adjust the x-axis to start at 0
axis(1, at = seq(0, 80, by = 10))  #
less_ccf_result <- ccf(Less_spore_data_complete$Average_Hedo_Spore ,
Less_recruit_data_complete$`Recruit Density`,
type = "correlation",
plot = FALSE,
lag.max = 80)
# Plot the ccf result
plot(less_ccf_result,
main = "L. littoralis",
ylab = "Cross-Correlation Coefficient",
xlab = "lag (weeks)",
xlim = c(0, 80),
ylim = c(-1, 1),
col = "blue")
# Adjust the x-axis to start at 0
axis(1, at = seq(0, 80, by = 10))  #
hedo_ccf_result <- ccf(Hedo_spore_data_complete$Average_Spore,
Hedo_recruit_data_complete$`Recruit Density`,
type = "correlation",
plot = FALSE,
lag.max = 80)
# Plot the ccf result
plot(hedo_ccf_result,
main = "P. palmaeformis",
ylab = "Cross-Correlation Coefficient",
xlab = "lag (weeks)",
xlim = c(0, 80),
ylim = c(-1, 1),
col = "goldenrod2")
# Adjust the x-axis to start at 0
axis(1, at = seq(0, 80, by = 10))  #
hedo_ccf_result <- ccf(Hedo_spore_data_complete$Average_Spore,
Hedo_recruit_data_complete$`Recruit Density`,
type = "correlation",
plot = FALSE,
lag.max = 80)
# Plot the ccf result
plot(hedo_ccf_result,
main = H. sessile",
hedo_ccf_result <- ccf(Hedo_spore_data_complete$Average_Spore,
Hedo_recruit_data_complete$`Recruit Density`,
type = "correlation",
plot = FALSE,
lag.max = 80)
# Plot the ccf result
plot(hedo_ccf_result,
main = "H. sessile",
ylab = "Cross-Correlation Coefficient",
xlab = "lag (weeks)",
xlim = c(0, 80),
ylim = c(-1, 1),
col = "goldenrod2")
# Adjust the x-axis to start at 0
axis(1, at = seq(0, 80, by = 10))  #
alaria_ccf_result <- ccf(Alaria_spore_data_complete$Average_Spore,
Alaria_recruit_data_complete$`Recruit Density`,
type = "correlation",
plot = FALSE,
lag.max = 80)
# Plot the ccf result
plot(alaria_ccf_result,
main = "H. sessile",
ylab = "Cross-Correlation Coefficient",
xlab = "lag (weeks)",
xlim = c(0, 80),
ylim = c(-1, 1),
col = "#FF0800")
# Adjust the x-axis to start at 0
axis(1, at = seq(0, 80, by = 10))  #
#Alaria
alaria_ccf_result <- ccf(Alaria_spore_data_complete$Average_Spore,
Alaria_recruit_data_complete$`Recruit Density`,
type = "correlation",
plot = FALSE,
lag.max = 80)
# Plot the ccf result
plot(alaria_ccf_result,
main = "A. marginata",
ylab = "Cross-Correlation Coefficient",
xlab = "lag (weeks)",
xlim = c(0, 80),
ylim = c(-1, 1),
col = "#FF0800")
# Adjust the x-axis to start at 0
axis(1, at = seq(0, 80, by = 10))  #
#Hedophyllum
hedo_ccf_result <- ccf(Hedo_spore_data_complete$Average_Spore,
Hedo_recruit_data_complete$`Recruit Density`,
type = "correlation",
plot = FALSE,
lag.max = 80)
# Plot the ccf result
plot(hedo_ccf_result,
main = "H. sessile",
ylab = "Cross-Correlation Coefficient",
xlab = "lag (weeks)",
xlim = c(0, 80),
ylim = c(-1, 1),
col = "goldenrod2")
# Adjust the x-axis to start at 0
axis(1, at = seq(0, 80, by = 10))  #
#Lessoniopsis
less_ccf_result <- ccf(Less_spore_data_complete$Average_Hedo_Spore ,
Less_recruit_data_complete$`Recruit Density`,
type = "correlation",
plot = FALSE,
lag.max = 80)
# Plot the ccf result
plot(less_ccf_result,
main = "L. littoralis",
ylab = "Cross-Correlation Coefficient",
xlab = "lag (weeks)",
xlim = c(0, 80),
ylim = c(-1, 1),
col = "blue")
# Adjust the x-axis to start at 0
axis(1, at = seq(0, 80, by = 10))  #
#Postelsia
post_ccf_result <- ccf(Post_spore_data_complete$Average_Spore,
Post_recruit_data_complete$`Recruit Density`,
type = "correlation",
plot = FALSE,
lag.max = 80)
# Plot the ccf result
plot(post_ccf_result,
main = "P. palmaeformis",
ylab = "Cross-Correlation Coefficient",
xlab = "lag (weeks)",
xlim = c(0, 80),
ylim = c(-1, 1),
col = "purple")
# Adjust the x-axis to start at 0
axis(1, at = seq(0, 80, by = 10))  #
knitr::opts_chunk$set(echo = TRUE)
site_colors <- c(
"FC" = "#4b2991",  # Dark orange for FC
"BB" = "#4b2991", # Light orange for BB
"YB" = "#a52fa2",   # Dark green for YB
"SH" = "#a52fa2",  # Light green for SH
"TK" = "#a52fa2",  # Light green for SH
"CB" = "#ea4f88",  # Dark purple for CB
"RP" = "#ea4f88"       # Light purple for RP
)
#prep data
library(readxl)
library(tidyverse)
library(dplyr)
library(plotrix)
library(lubridate)
#Master_Data_Sheet_KRC <- read_excel("Master_Data_Sheet_KRC.xlsx") # you will have to change the directory to where you saved the file, then you should be able to upload
MasterData <- Master_Data_KRC_Fixed_1
as.Date(MasterData$Date, format="%Y-%d-%m")
MasterData$Julian_date <- yday(MasterData$Date)
MasterData$month <- format(MasterData$Date, '%m')
names(MasterData)[2] <- 'site'
names(MasterData)[7] <- 'recruits'
names(MasterData)[8] <- 'tide'
names(MasterData)[4] <- 'transect'
MasterData$PlotID <- paste(MasterData$site, MasterData$`Transect #`, MasterData$`Meter #`, sep = ".")
#create season in data set
HedophyllumBar <- subset( MasterData, Species =='Hedophyllum sessile')
AlariaBar <- subset( MasterData, Species =='Alaria marginata')
PostelsiaBar <- subset( MasterData, Species =='Postelsia palmaeformis')
LaminariaBar <- subset( MasterData, Species =='Laminaria sinclairii')
LessoniopsisBar <- subset( MasterData, Species =='Lessoniopsis littoralis')
EgregiaBar <- subset( MasterData, Species =='Egregia menziesii')
get_season <- function(date) {
# Extract the month and day
month_day <- format(date, "%m-%d")
# Define season ranges
if (month_day >= "12-21" | month_day <= "03-20") {
return("Winter")
} else if (month_day >= "03-21" & month_day <= "06-20") {
return("Spring")
} else if (month_day >= "06-21" & month_day <= "09-22") {
return("Summer")
} else {
return("Fall")
}
}
# Create a new column 'season' using mutate and the get_season function
MasterData <- MasterData %>%
mutate(season = sapply(Date, get_season))
Transect_Avg <- MasterData %>%
group_by(Date, site, Species, transect) %>%
summarise(average_value = mean(recruits))
Transect_Avg <- Transect_Avg %>%
mutate(season = sapply(Date, get_season))
Transect_Avg <- Transect_Avg %>%
mutate(cape = case_when(
site %in% c('FC', 'BB') ~ 'Foulweather',   # Assign 'Foulweather' for FC and BB
site %in% c('SH', 'YB', 'TK') ~ 'Perpetua', # Assign 'Perpetua' for SH, YB, and TK
site %in% c('CB', 'RP') ~ 'Blanco',        # Assign 'Blanco' for CB and RP
TRUE ~ 'Unknown'                           # For any other site, assign 'Unknown'
))
Hedophyllum <- subset( Transect_Avg, Species =='Hedophyllum sessile')
Alaria <- subset( Transect_Avg, Species =='Alaria marginata')
Postelsia <- subset( Transect_Avg, Species =='Postelsia palmaeformis')
Laminaria <- subset( Transect_Avg, Species =='Laminaria sinclairii')
Lessoniopsis <- subset( Transect_Avg, Species =='Lessoniopsis littoralis')
Egregia <- subset( Transect_Avg, Species =='Egregia menziesii')
HedophyllumBar$site <- factor(HedophyllumBar$site, levels = c("FC", "BB", "YB", "SH", "RP", "CB"))
HEavg_recruits <- HedophyllumBar %>%
group_by(site) %>%
summarise(
average_recruits = mean(recruits),          # Calculate the average recruits
se_recruits = sd(recruits) / sqrt(n())      # Calculate the standard error
)
hedo_site_plot <- ggplot(HEavg_recruits, aes(x = site, y = average_recruits, fill = site)) +
geom_bar(stat = "identity", color = NA, show.legend = FALSE, size = 0) +  # No borders around bars
geom_errorbar(
aes(ymin = average_recruits - se_recruits, ymax = average_recruits + se_recruits),
width = 0.2, color = "black", linewidth = 0.2  # Add error bars
) +
scale_fill_manual(values = site_colors) +  # Apply custom colors based on 'site'
theme_minimal() +  # Clean theme
theme(
panel.grid = element_blank(),  # Remove grid lines
axis.ticks = element_blank(),  # Remove axis ticks
axis.line = element_blank(),   # Remove axis lines
plot.background = element_blank(),  # Remove background color
panel.background = element_blank(),  # Remove panel background
panel.border = element_blank(),
axis.title.x = element_blank(),      # Remove x-axis title
axis.title.y = element_blank(),
plot.title = element_text(face = "italic", size = 10)  # Remove panel borders
) +
labs(title = "H. sessile")+
# ylim(0, 52)+
scale_y_continuous(breaks = seq(0, 52, by = 20), limits = c(0,52))
AlariaBar$site <- factor(AlariaBar$site, levels = c("BB", "TK", "RP", "CB"))
ALavg_recruits <- AlariaBar %>%
group_by(site) %>%
summarise(
average_recruits = mean(recruits),          # Calculate the average recruits
se_recruits = sd(recruits) / sqrt(n())      # Calculate the standard error
)
ala_site_plot <- ggplot(ALavg_recruits, aes(x = site, y = average_recruits, fill = site)) +
geom_bar(stat = "identity", color = NA, show.legend = FALSE, size = 0) +  # No borders around bars
geom_errorbar(
aes(ymin = average_recruits - se_recruits, ymax = average_recruits + se_recruits),
width = 0.2, color = "black", linewidth = 0.2  # Add error bars
) +
scale_fill_manual(values = site_colors) +  # Apply custom colors based on 'site'
theme_minimal() +  # Clean theme
theme(
plot.title = element_text(face = "italic", size = 10),
# Set background to white
panel.background = element_rect(fill = "white", color = "white"),  # Background of the plot panel
plot.background = element_rect(fill = "white", color = "white"),   # Background of the entire plot
panel.grid.major = element_blank(),  # Remove major grid lines
panel.grid.minor = element_blank(),  # Remove minor grid lines
legend.title = element_blank(),
axis.title.x = element_blank(),      # Remove x-axis title
axis.title.y = element_blank(),  # Remove the legend title
legend.position = "right")  +
labs(title = "A. marginata") +
# ylim(0, 52) +
scale_y_continuous(breaks = seq(0, 52, by = 20), limits = c(0,52))
#ggsave("Alaria_Site_plot.png", plot = ala_site_plot, width = 8, height = 6, dpi = 300)
EgregiaBar$site <- factor(EgregiaBar$site, levels = c("FC", "BB", "YB", "SH", "RP", "CB"))
EGavg_recruits <- EgregiaBar %>%
group_by(site) %>%
summarise(
average_recruits = mean(recruits),          # Calculate the average recruits
se_recruits = sd(recruits) / sqrt(n())      # Calculate the standard error
)
egr_site_plot <- ggplot(EGavg_recruits, aes(x = site, y = average_recruits, fill = site)) +
geom_bar(stat = "identity", color = NA, show.legend = FALSE, size = 0) +  # No borders around bars
geom_errorbar(
aes(ymin = average_recruits - se_recruits, ymax = average_recruits + se_recruits),
width = 0.2, color = "black", linewidth = 0.2  # Add error bars
) +
scale_fill_manual(values = site_colors) +  # Apply custom colors based on 'site'
theme_minimal() +  # Clean theme
theme(
panel.grid = element_blank(),  # Remove grid lines
axis.ticks = element_blank(),  # Remove axis ticks
axis.line = element_blank(),   # Remove axis lines
plot.background = element_blank(),  # Remove background color
panel.background = element_blank(),
axis.title.x = element_blank(),      # Remove x-axis title
axis.title.y = element_blank(),  # Remove panel background
panel.border = element_blank(),  plot.title = element_text(face = "italic", size = 10)  # Remove panel borders
) +
labs(title = "E. menziesii") +
# ylim(0, 52) +
scale_y_continuous(breaks = seq(0, 52, by = 20), limits = c(0,52))
LaminariaBar$site <- factor(LaminariaBar$site, levels = c( "YB", "SH"))
LAavg_recruits <- LaminariaBar %>%
group_by(site) %>%
summarise(
average_recruits = mean(recruits),          # Calculate the average recruits
se_recruits = sd(recruits) / sqrt(n())      # Calculate the standard error
)
lam_site_plot <- ggplot(LAavg_recruits, aes(x = site, y = average_recruits, fill = site)) +
geom_bar(stat = "identity", color = NA, show.legend = FALSE, size = 0) +  # No borders around bars
geom_errorbar(
aes(ymin = average_recruits - se_recruits, ymax = average_recruits + se_recruits),
width = 0.2, color = "black", linewidth = 0.2  # Add error bars
) +
scale_fill_manual(values = site_colors) +  # Apply custom colors based on 'site'
theme_minimal() +  # Clean theme
theme(
panel.grid = element_blank(),  # Remove grid lines
axis.ticks = element_blank(),  # Remove axis ticks
axis.line = element_blank(),   # Remove axis lines
plot.background = element_blank(),  # Remove background color
panel.background = element_blank(),
axis.title.x = element_blank(),      # Remove x-axis title
axis.title.y = element_blank(),# Remove panel background
panel.border = element_blank(),  plot.title = element_text(face = "italic", size = 10)  # Remove panel borders
) +
labs(title = "L. sinclairii") +
# ylim(0, 55) +
scale_y_continuous(breaks = seq(0, 52, by = 20), limits = c(0,52))
LessoniopsisBar$site <- factor(LessoniopsisBar$site, levels = c("FC", "BB", "YB", "SH", "RP", "CB"))
LEavg_recruits <- LessoniopsisBar %>%
group_by(site) %>%
summarise(
average_recruits = mean(recruits),          # Calculate the average recruits
se_recruits = sd(recruits) / sqrt(n())      # Calculate the standard error
)
less_site_plot <- ggplot(LEavg_recruits, aes(x = site, y = average_recruits, fill = site)) +
geom_bar(stat = "identity", color = NA, show.legend = FALSE, size = 0) +  # No borders around bars
geom_errorbar(
aes(ymin = average_recruits - se_recruits, ymax = average_recruits + se_recruits),
width = 0.2, color = "black", linewidth = 0.2  # Add error bars
) +
scale_fill_manual(values = site_colors) +  # Apply custom colors based on 'site'
theme_minimal() +  # Clean theme
theme(
panel.grid = element_blank(),  # Remove grid lines
axis.ticks = element_blank(),  # Remove axis ticks
axis.line = element_blank(),   # Remove axis lines
plot.background = element_blank(),  # Remove background color
panel.background = element_blank(),
axis.title.x = element_blank(),      # Remove x-axis title
axis.title.y = element_blank(),  # Remove panel background
panel.border = element_blank(),  plot.title = element_text(face = "italic", size = 10)  # Remove panel borders
) +
labs(title = "L. littoralis") +
# ylim(0, 52) +
scale_y_continuous(breaks = seq(0, 52, by = 20), limits = c(0,52))
PostelsiaBar$site <- factor(PostelsiaBar$site, levels = c("FC", "BB", "YB", "SH", "RP", "CB"))
POavg_recruits <- PostelsiaBar %>%
group_by(site) %>%
summarise(
average_recruits = mean(recruits),          # Calculate the average recruits
se_recruits = sd(recruits) / sqrt(n())      # Calculate the standard error
)
post_site_plot <- ggplot(POavg_recruits, aes(x = site, y = average_recruits, fill = site)) +
geom_bar(stat = "identity", color = NA, show.legend = FALSE, size = 0) +  # No borders around bars
geom_errorbar(
aes(ymin = average_recruits - se_recruits, ymax = average_recruits + se_recruits),
width = 0.2, color = "black", linewidth = 0.2  # Add error bars
) +
scale_fill_manual(values = site_colors) +  # Apply custom colors based on 'site'
theme_minimal() +  # Clean theme
theme(
panel.grid = element_blank(),  # Remove grid lines
axis.ticks = element_blank(),  # Remove axis ticks
axis.line = element_blank(),   # Remove axis lines
plot.background = element_blank(),  # Remove background color
panel.background = element_blank(),
axis.title.x = element_blank(),      # Remove x-axis title
axis.title.y = element_blank(),  # Remove panel background
panel.border = element_blank(),  plot.title = element_text(face = "italic", size = 10)  # Remove panel borders
) +
labs(title = "P. palmaeformis") +
# ylim(0, 52) +
scale_y_continuous(breaks = seq(0, 52, by = 20), limits = c(0,52))
legend_plot <- ggplot(data = data.frame(x = c(1, 2, 3), y = c(1, 2, 3), site = c("Foulweather", "Perpetua", "Blanco")),
aes(x = x, y = y, fill = site)) +
geom_bar(stat = "identity", show.legend = TRUE) +
scale_fill_manual(values = c("Foulweather" = "#4b2991", "Perpetua" = "#a52fa2", "Blanco" = "#ea4f88")) +
theme_void() +
labs(fill="Cape") +
theme(legend.position = "top", legend.justification = "right", legend.box = "horizontal")  # Position legend top-left
legend <- get_legend(legend_plot)
library(ggpubr)
library(ggrepel)
legend_plot <- ggplot(data = data.frame(x = c(1, 2, 3), y = c(1, 2, 3), site = c("Foulweather", "Perpetua", "Blanco")),
aes(x = x, y = y, fill = site)) +
geom_bar(stat = "identity", show.legend = TRUE) +
scale_fill_manual(values = c("Foulweather" = "#4b2991", "Perpetua" = "#a52fa2", "Blanco" = "#ea4f88")) +
theme_void() +
labs(fill="Cape") +
theme(legend.position = "top", legend.justification = "right", legend.box = "horizontal")  # Position legend top-left
legend <- get_legend(legend_plot)
Site_bar_Combined <- ggarrange(
ala_site_plot,
egr_site_plot,
hedo_site_plot,
lam_site_plot,
less_site_plot,
post_site_plot,
nrow = 3,
ncol = 2
)
# Add common axis labels to the combined plot
Site_bar_Combined <- annotate_figure(
Site_bar_Combined,
bottom = text_grob("Site", size = 14),  # x-axis label
left = text_grob("Average recruits per 0.25 meter squared", rot = 90, size = 14),  # y-axis label
top = legend  # Add legend to the top of the figure
)
# Display the combined plot with the axis labels
Site_bar_Combined
ggsave("Recruitment_Bar_All.png", plot = Site_bar_Combined, width = 8, height = 6, dpi = 300)
knitr::opts_chunk$set(echo = TRUE)
#Adult Plot
Adult_NMDS_Plot = ggplot(data = data.scores, aes(x = NMDS1, y = NMDS2)) +
geom_point(data = data.scores, aes(colour = site, shape = cape), size = 3, alpha = 0.5) +
scale_shape_manual(values = c(15, 17, 16))+
scale_colour_manual(values = c("orange", "darkgreen", "red", "lightblue", "blue"))  +
geom_segment(aes(x = 0, y = 0, xend = NMDS1, yend = NMDS2),
data = en_coord_contA, linewidth =1, alpha = 0.5, colour = "grey30") +
#  geom_point(data = en_coord_catA, aes(x = NMDS1, y = NMDS2),
# shape = "diamond", linewidth = 4, alpha = 0.6, colour = "navy") +
# geom_text(data = en_coord_catA, aes(x = NMDS1, y = NMDS2+0.04),
#label = row.names(en_coord_catA), colour = "navy", fontface = "bold") +
# geom_text(data = en_coord_contA, aes(x = NMDS1, y = NMDS2), colour = "grey30",
#  fontface = "bold", label = row.names(en_coord_cont)) +
geom_text_repel(data = en_coord_contA, aes(x = NMDS1, y = NMDS2, label = row.names(en_coord_contA),, vjust = -1.2, hjust = -0.5),
colour = "grey30", fontface = "bold", alpha = 0.8, size = 3, box.padding = 0.35,
point.padding = 0.5, segment.color = "grey30", max.overlaps = 10) +
theme(axis.title = element_text(size = 10, face = "bold", colour = "grey30"),
panel.background = element_blank(), panel.border = element_rect(fill = NA, colour = "grey30"),
axis.ticks = element_blank(), axis.text = element_blank(), legend.key = element_blank(),
legend.title = element_text(size =   10, face = "bold", colour = "grey30"),
legend.text = element_text(size =   9, colour = "grey30")) +
labs(colour = "site") +
ggtitle("Adult kelp")
knitr::opts_chunk$set(echo = TRUE)
ggsave("Recruitment_Bar_All.svg", plot = Site_bar_Combined, device = "svg")
library(ggplot2)
library(ggpubr)
library(ggrepel)
ggsave("Recruitment_Bar_All.svg", plot = Site_bar_Combined, device = "svg")
install.packages("svglite")
library(svglite)
ggsave("Recruitment_Bar_All.svg", plot = Site_bar_Combined, device = "svg")
knitr::opts_chunk$set(echo = TRUE)
centroids <- data.scores %>%
group_by(species) %>%
summarise(NMDS1 = mean(NMDS1), NMDS2 = mean(NMDS2))
knitr::opts_chunk$set(echo = TRUE)
#load data and packages
library(readxl)
library(dplyr)
library(vegan)
library(ggplot2)
library(permute) # necessary to run vegan package
library(lattice)
Recruit_Matrix <- read.csv("Recruit_Matrix.csv") #read in  data
environmental_matrix <- read.csv("~/GitHub/OOST-Report/environmental_matrix.csv") #read in environmental data
centroids <- data.scores %>%
group_by(species) %>%
summarise(NMDS1 = mean(NMDS1), NMDS2 = mean(NMDS2))
View(Recruit_Data_Matrix)
View(data.scores)
setwd("/Users/sarahsellke/Documents/GitHub/Tropical_Predation_Panama/Data")
knitr::opts_chunk$set(echo = TRUE)
#load origional data
exp_data_24 <- read.csv("Photo_Analysis_Master_data.csv")
View(exp_data_24)
#create plot ID column
plot_id_cols <- c("Site", "Rep", "Treatment")                             # Define variables for merge
#create plot ID column
plot_id_cols <- c("Site", "Rep", "Treatment")                             # Define variables for merge
exp_data_24$Photo_ID <- do.call(paste, c(data[plot_id_cols], sep = "."))
#create plot ID column
plot_id_cols <- c("Site", "Rep", "Treatment")                             # Define variables for merge
exp_data_24$Plot_ID <- do.call(paste, c(data[plot_id_cols], sep = "."))
#create plot ID column
exp_data_24 <- exp_data_24 %>% mutate(info=paste(Site, Rep, Treatment = "."))
#create plot ID column
exp_data_24 <- exp_data_24 %>% mutate(PlotID=paste(Site, Rep, Treatment = "."))
View(exp_data_24)
#create plot ID column
exp_data_24 <- exp_data_24 %>% mutate(PlotID=paste(Site, Rep, Treatment, sep =  = "."))
#create plot ID column
exp_data_24 <- exp_data_24 %>% mutate(PlotID=paste(Site, Rep, Treatment, sep   = "."))
View(exp_data_24)
#remove unnecessary columns
exp_data_24 %>% select(-Photo_ID)
#create plot ID column
exp_data_24 <- exp_data_24 %>% mutate(PlotID=paste(Site, Rep, Treatment, sep   = "."))
#remove unnecessary columns
exp_data_24 <- exp_data_24 %>% select(-Photo_ID)
